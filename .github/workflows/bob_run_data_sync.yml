name: BOB Run Data Sync

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - rp_bob
    paths:
      - run_page/strava_sync.py
      - run_page/gen_svg.py
      - run_page/gpx_sync.py
      - run_page/tcx_sync.py
      - requirements.txt

env:
  # please change to your own config.
  RUN_TYPE: strava # support strava/nike/garmin/garmin_cn/keep/only_gpx/nike_to_strava/strava_to_garmin/strava_to_garmin_cn/garmin_to_strava/garmin_to_strava_cn, Please change the 'pass' it to your own
  ATHLETE: Bob
  TITLE: Bob Running
  MIN_GRID_DISTANCE: 5 # change min distance here
  TITLE_GRID: Over 5km Runs # also here
  GITHUB_NAME: Ym9i
  GITHUB_EMAIL: bob

  # IGNORE_BEFORE_SAVING: True # if you want to ignore some data before saving, set this to True
  IGNORE_START_END_RANGE: 10 # Unit meter
  # Dont making this huge, just picking points you needing. https://developers.google.com/maps/documentation/utilities/polylineutility using this tool to making your polyline
  IGNORE_POLYLINE: 'ktjrFoemeU~IorGq}DeB'
  IGNORE_RANGE: 10 # Unit meter
  SAVE_DATA_IN_GITHUB_CACHE: false # if you deploy in the vercal, check the README
  DATA_CACHE_PREFIX: "track_data"
  BUILD_GH_PAGES: false # If you do not need GitHub Page please set it to `false`
 
jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    outputs:
      SAVE_DATA_IN_GITHUB_CACHE: ${{ steps.set_output.outputs.SAVE_DATA_IN_GITHUB_CACHE }}
      DATA_CACHE_PREFIX: ${{ steps.set_output.outputs.DATA_CACHE_PREFIX }}
      BUILD_GH_PAGES: ${{ steps.set_output.outputs.BUILD_GH_PAGES }}
    environment:
      name: envs
    steps:
      - name: Set timezone
        run: sudo timedatectl set-timezone Asia/Shanghai
      - name: Checkout
        uses: actions/checkout@v3
      - uses: manyuanrong/setup-ossutil@v2.0
        with:
          endpoint: ${{ vars.ALIYUN_OSS_ENDPOINT }}
          access-key-id: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: 'requirements.txt'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Cache Data Files
        if: env.SAVE_DATA_IN_GITHUB_CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: |
            activities
            assets
            GPX_OUT
            TCX_OUT
            FIT_OUT
            Workouts
            run_page/data.db
            src/static/activities.json
            imported.json
          key: ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-
            ${{ env.DATA_CACHE_PREFIX }}-

# -----------------
# get data.db
      - name: Get pre MD5 
        id: get_md5_pre
        run: |
          ossutil cp -rf "${{ vars.ALIYUN_OSS_PATH }}data.db" run_page/
          echo "MD5_PRE=$(md5sum run_page/data.db | awk '{print $1}')" >> $GITHUB_OUTPUT
      - name: Run sync Strava script
        if: env.RUN_TYPE == 'strava'
        run: |
          python run_page/strava_sync.py ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }}
      - name: Get after MD5 
        id: get_md5_after
        run: echo "MD5_AFTER=$(md5sum run_page/data.db | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Make svg GitHub profile
        if: ${{ steps.get_md5_pre.outputs.MD5_PRE != steps.get_md5_after.outputs.MD5_AFTER }}
        run: |
          python run_page/gen_svg.py --from-db --title "${{ env.TITLE }}" --type github --athlete "${{ env.ATHLETE }}" --special-distance 10 --special-distance2 20 --special-color yellow --special-color2 red --output assets/github.svg --use-localtime --min-distance 0.5
          python run_page/gen_svg.py --from-db --title "${{ env.TITLE_GRID }}" --type grid --athlete "${{ env.ATHLETE }}" --output assets/grid.svg --special-color yellow --special-color2 red --special-distance 20 --special-distance2 40 --use-localtime --min-distance "${{ env.MIN_GRID_DISTANCE }}"
          python run_page/gen_svg.py --from-db --type circular --use-localtime
          python run_page/gen_svg.py --from-db --year $(date +"%Y")  --language zh_CN --title "$(date +"%Y") Running" --type github --athlete "${{ env.ATHLETE }}" --special-distance 10 --special-distance2 20 --special-color yellow --special-color2 red --output assets/github_$(date +"%Y").svg --use-localtime --min-distance 0.5
      - name: Copy to Aliyun OSS
        if: ${{ steps.get_md5_pre.outputs.MD5_PRE != steps.get_md5_after.outputs.MD5_AFTER }}
        run: | 
          ossutil cp -rf run_page/data.db "${{ vars.ALIYUN_OSS_PATH }}data_archived/data.db.$(date +%Y%m%d_%H%M)"
          ossutil cp -rf run_page/data.db "${{ vars.ALIYUN_OSS_PATH }}data.db"
      - name: Push new runs
        if: ${{ steps.get_md5_pre.outputs.MD5_PRE != steps.get_md5_after.outputs.MD5_AFTER }}
        run: |
          git config --local user.email "${{ env.GITHUB_EMAIL }}"
          git config --local user.name "${{ env.GITHUB_NAME }}"
          git add .
          git commit -m 'update new runs' || echo "nothing to commit"
          git push || echo "nothing to push"
      - name: Set Output
        id: set_output
        run: |
          echo "SAVE_DATA_IN_GITHUB_CACHE=${{ env.SAVE_DATA_IN_GITHUB_CACHE }}" >> "$GITHUB_OUTPUT"
          echo "DATA_CACHE_PREFIX=${{ env.DATA_CACHE_PREFIX }}" >> "$GITHUB_OUTPUT"
          echo "BUILD_GH_PAGES=${{ env.BUILD_GH_PAGES }}" >> "$GITHUB_OUTPUT"